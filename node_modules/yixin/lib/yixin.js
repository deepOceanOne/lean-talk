/**
 * Created by fuzesun on 14-5-12.
 */
var crypto = require('crypto');
var xml2js = require('xml2js');
var BufferHelper = require('bufferhelper');
var utils = require('./utils');
var util = require('util');
var Event = require('events');
var EventEmitter = Event.EventEmitter;
var replyWrapper = utils.replyWrapper;
var SUPPORT_MSG_TYPE = ['text', 'image', 'voice', 'video', 'location', 'event'];
/*!
 * 检查签名
 */
var checkSignature = function (query, token) {
  var query = query || {};
  var signature = query.signature;
  var timestamp = query.timestamp;
  var nonce = query.nonce;

  var shasum = crypto.createHash('sha1');
  var arr = [token, timestamp, nonce].sort();
  shasum.update(arr.join(''));

  return shasum.digest('hex') === signature;
};

/*!
 * Tips : 和connect的bodyParser中间件共同使用时，
 * yixin.middleware 需要在bodyParser前使用。
 * 原因：因为bodyParser会将request流的变为不可读
 */
var getMessage = function (stream, callback) {
  var buf = new BufferHelper();
  buf.load(stream, function (err, buf) {
    if (err) {
      return callback(err);
    }
    var xml = buf.toString('utf-8');
    xml2js.parseString(xml, {trim: true}, callback);
  });
};

/*!
 * 检查对象是否为空，对xml2js的workaround
 */
var isEmpty = function (thing) {
  return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
};

/*!
 * 将xml2js解析出来的对象转换成直接可访问的对象
 */
var formatMessage = function (result) {
  var message = {};
  for (var key in result.xml) {
    var val = result.xml[key][0];
    message[key] = (isEmpty(val) ? '' : val).trim();
  }
  return message;
};


var Yixin = function(token) {
  EventEmitter.call(this);
  this.token = token;
  var self = this;
  SUPPORT_MSG_TYPE.forEach(function(type) {
    self[type] = function(handler) {
      self.on(type, handler);
      return this;
    }
  });

};
util.inherits(Yixin, EventEmitter);

var yixin = Yixin.prototype;



yixin.middleware = function() {
  var self = this;
  return function(req, res, next) {
    var method = req.method;

    if(!checkSignature(req.query, self.token)) {
      res.writeHead(401);
      res.end('Invalid signature');
      var err = {};
      err.name = 'Invalid signature';
      return next(err);
    }

    if(method === 'GET') {
      res.writeHead(200);
      res.end(req.query.echostr);
    } else if(method === 'POST') {
      self._handle(req, res, next);
    } else {
      res.writeHead(501);
      res.end('Not Implemented');
      var err = {};
      err.name = 'Method:' + method + ' in not supported';
      return next(err);
    }
  }
};

yixin._handle = function (req, res, next) {
  var self = this;
  getMessage(req, function(err, result) {
    if(!!err) {
      err.name = 'GetXmlDataError';
      return next(err);
    }
    var message = formatMessage(result);
    req.yixin = message;
    res.reply = function(content) {
      res.writeHead(200);
      res.end(replyWrapper(content, message.ToUserName, message.FromUserName));
    };
    self.emit(message.MsgType, req, res);
  });
};

module.exports = Yixin;