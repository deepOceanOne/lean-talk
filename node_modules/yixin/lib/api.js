/**
 * Created by fuzesun on 14-5-12.
 */
var request = require('superagent');
var fs = require('fs');
var utils = require('./utils');
var wrapper = utils.wrapper;
var invokeCallback = utils.invokeCallback;
var customContentWrapper = utils.wrapCustomContent;
var groupContentWrapper = utils.wrapGroupContent;
var API = function (appid, secret) {
  this.appid = appid;
  this.secret = secret;

  this.prefix = 'https://api.yixin.im/cgi-bin/';
  this.mediaPrefix = this.prefix + 'media/';
  this.menuPrefix = this.prefix +  'menu/';
  this.groupPrefix = this.prefix + 'groups/';
  this.messagePrefix = this.prefix + 'message/';
  this.customMsgPrefix = this.messagePrefix + 'custom/';
  this.groupMsgPrefix = this.messagePrefix + 'group/';
  this.qrcodePrefix = this.prefix + 'qrcode/';
  this.followPrefix = this.prefix + 'follow/';
  this.userPrefix = this.prefix + 'user/';
};

var api = API.prototype;

/*
 * 根据创建API时传入的appid和appsecret获取access token
 * 进行后续所有API调用时，需要先获取access token
 * 详细请看：<http://dev.yixin.im/wiki/qa/index.php?title=获取凭证>
 *
 * Examples:
 * ```
 * api.getAccessToken(callback);
 * ```
 * Callback:
 *
 * - `err`, 获取access token出现异常时的异常对象
 * - `result`, 成功时得到的响应结果
 *
 * Result:
 * ```
 * {"access_token": "ACCESS_TOKEN","expires_in": 86400}
 * ```
 * @param {Function} callback 回调函数
 */
api.getAccessToken = function (callback) {
  var self = this;
  var url = this.prefix + 'token';
  request
    .get(url)
    .query({grant_type: "client_credential", appid: self.appid, secret: this.secret})
    .end(wrapper(function (err, data) {
      if(!!err) {
        return callback(err);
      }
      self.token = data.access_token;
      self.expireTime = (new Date().getTime()) + (data.expires_in - 10) * 1000;
      callback(null, data);
    }));
  return this;
};

api.isAccessTokenValid = function () {
  return !!this.token && (new Date().getTime()) < this.expireTime;
};
/**
 * 需要access token的接口调用如果采用request进行封装后，就可以直接调用
 * 无需依赖getAccessToken为前置调用
 *
 * @param {Function} method 需要封装的方法
 * @param {Array} args 方法需要的参数
 */
api._request = function (method, args) {
  var self = this;
  var callback = args[args.length - 1];
  if(this.isAccessTokenValid()) {
    method.apply(self, args);
  } else {
    this.getAccessToken(function (err, data) {
      if(!!err) {
        invokeCallback(callback, err);
        return;
      }
      method.apply(self, args);
    });
  }
};

/*
 * 创建自定义菜单
 * 详细请看：<http://dev.yixin.im/wiki/qa/index.php?title=管理自定义菜单#.E8.87.AA.E5.AE.9A.E4.B9.89.E8.8F.9C.E5.8D.95.E5.88.9B.E5.BB.BA>
 *
 * Menu:
 * ```
 * {
 *   "button":[
 *     {
 *       "name" : "在线客服",
 *       "sub_button" : [
 *         { "key" : "/dt2/ai.yx",
 *           "name" : "召唤精灵",
 *           "type" : "click"
 *         },
 *         { "key" : "/dt2/chat.yx",
 *           "name" : "人工服务",
 *           "type" : "click"
 *         }
 *       ]
 *    },
 *    {
 *      "name" : "自助服务",
 *      "key" : "/dt2/self.yx?id=36001",
 *      "type" : "click"
 *    }
 *  ]
 * }
 * ```
 * Examples:
 * ```
 * api.createMenu(menu, callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {Object} menu 菜单对象
 * @param {Function} callback 回调函数
 */
api.createMenu = function (menu, callback) {
  this._request(this._createMenu, arguments);
};
api._createMenu = function (menu, callback) {
  var self = this;
  var url = this.menuPrefix + 'create';
  request
    .post(url)
    .query({access_token: self.token})
    .type('json')
    .send(menu)
    .end(wrapper(callback));
};
/*
 * 自定义菜单查询
 * 对应创建接口，正确的Json返回结果:
 * ```
 *  * {
 *   "button":[
 *     {
 *       "name" : "在线客服",
 *       "sub_button" : [
 *         { "key" : "/dt2/ai.yx",
 *           "name" : "召唤精灵",
 *           "type" : "click"
 *         },
 *         { "key" : "/dt2/chat.yx",
 *           "name" : "人工服务",
 *           "type" : "click"
 *         }
 *       ]
 *    },
 *    {
 *      "name" : "自助服务",
 *      "key" : "/dt2/self.yx?id=36001",
 *      "type" : "click"
 *    }
 *  ]
 * }
 * ```
 * Example:
 * api.createMenu(menu, callback);
 * ```
 * Callback:
 * - `err`, 调用失败时得到的异常
 * ```
 * @param {Function} callback 回调函数
 */
api.getMenu = function (callback) {
  this._request(this._getMenu, arguments);
};

api._getMenu = function (callback) {
  var self = this;
  var url = self.menuPrefix + 'get';

  request
    .get(url)
    .query({access_token: self.token})
    .end(wrapper(callback));
};
/*
 * 删除自定义菜单
 * Example:
 * api.createMenu(menu, callback);
 * ```
 * Callback:
 * - `err`, 调用失败时得到的异常
 * ```
 * @param {Function} callback 回调函数
 */
api.delMenu = function (callback) {
  this._request(this._delMenu, arguments);
};
api._delMenu = function (callback) {
  var self = this;
  var url = self.menuPrefix + "delete";
  request
    .get(url)
    .query({access_token: self.token})
    .end(wrapper(callback));
};

/*
 * 创建用户分组
 * 详情查看: <http://dev.yixin.im/wiki/qa/index.php?title=管理分组>
 * ```
 * Example:
 * api.createGroup(name, callback);
 * ```
 * Callback:
 * - `err`, 调用失败时得到的异常
 * - `data`, 调用成功的响应结果
 * - `response`, 响应实体
 *
 * data: {"group":{"id":85007,"name":"yixintest"}}
 * ```
 * @Param {String} name 用户组名称
 * @Param {Function} callback 回调函数
 */
api.createGroup = function (name, callback) {
  this._request(this._createGroup, arguments);
};
api._createGroup = function (name, callback) {
  var self = this;
  var url = this.groupPrefix + 'create';
  request
    .post(url)
    .query({access_token: self.token})
    .type('json')
    .send({"group":{"name":name}})
    .end(wrapper(callback));
};
/**
 * 查询所有用户分组
 * 正确的返回Json结果:
 * ```
 * {
 *   "groups":[
 *   {
 *     "id":0,     //分组id,易信分配
 *     "name":"未分组",//分组名
 *     "count":2   //分组成员个数
 *   },
 *   {
 *     "id":1,
 *     "name":"黑名单",
 *     "count":0
 *   },
 *   {
 *     "id":2,
 *     "name":"星标组",
 *     "count":0
 *   }]
 * }
 *```
 * Example:
 *   api.getGroups(callback);
 * ```
 * Callback:
 * - `err`, 调用失败时得到的异常
 * - `data`, 调用成功的响应结果
 * - `response`, 响应实体
 * ```
 * @Param {Function} callback 回调函数
 */
api.getGroups = function (callback) {
  this._request(this._getGroups, arguments);
};
api._getGroups = function (callback) {
  var self = this;
  var url = this.groupPrefix + 'get';
  request
    .get(url)
    .query({access_token: self.token})
    .accept('json')
    .end(wrapper(callback));
};

/**
 * 修改分组名
 * ```
 * Example:
 *   api.updateGroupName(id, newName, callback);
 * ```
 * Callback:
 * - `err`, 调用失败时得到的异常
 * ```
 * @Param {int} id 分组id,由易信分配
 * @Param {String} newName 分组新名称
 * @Param {Function} callback 回调函数
 */
api.updateGroupName = function (id, newName, callback) {
  this._request(this._updateGroupName, arguments);
};
api._updateGroupName = function (id, newName, callback) {
  var self = this;
  var url = self.groupPrefix + 'update';
  request
    .post(url)
    .query({access_token: self.token})
    .type('json')
    .send({"group": {"id": id, "name": newName}})
    .end(wrapper(callback));
};
/*
 * 移动用户分组
 * ```
 * Example:
 *   api.updateUserGroup(openid, toGroupId, callback);
 * ```
 * Callback:
 * - `err`, 调用失败得到的异常
 * ```
 * @Param {String} openid 用户唯一标识符
 * @Param {Int} toGroupId 分组Id
 * @Param {Function} callback
 */
api.updateUserGroup = function (openid, toGroupId, callback) {
  this._request(this._updateUserGroup, arguments);
};
api._updateUserGroup = function (openid, toGroupId, callback) {
  var self = this;
  var url = this.groupPrefix + 'members/update';
  request
    .post(url)
    .query({access_token: self.token})
    .type('json')
    .send({"openid": openid, "to_groupid": toGroupId})
    .end(wrapper(callback));
};
/*
 * 查询用户所在分组Id
 * ```
 * Example:
 *   api.getUserGroupId(openid, callback);
 * ```
 * Callback:
 * - `err`  调用失败得到的异常
 * - `data` 调用成功返回的数据
 * data: { "groupid": 102 }
 * ```
 * @Param {String} openid 用户唯一标识码
 */
api.getUserGroupId = function(openid, callback) {
  this._request(this._getUserGroupId, arguments);
};
api._getUserGroupId = function (openid, callback) {
  var self = this;
  var url = this.groupPrefix + 'getid';
  request
    .post(url)
    .query({access_token: self.token})
    .type('json')
    .send({"openid": openid})
    .accept('json')
    .end(wrapper(callback));
};
/**
 * 客服信息
 * 详情: <http://dev.yixin.im/wiki/qa/index.php?title=发送客服消息>
 */
/*
 * 客服消息共用函数
 * ```
 * @Param {Object} content 客服消息内容,已封装好的客服消息Json对象
 * @Param {Function} callback 回调函数
 * ```
 * Callback:
 * - `err` 调用接口失败
 * ```
 */
api._sendCustom = function(content, callback) {
  var self = this;
  var url = self.customMsgPrefix + 'send';
  if(!!content.err) {
    var error = {};
    error.name = "YixinApi-SendGroup";
    error.message = "the content to send is not validate";
    invokeCallback(callback, error);
    return;
  }
  request
    .post(url)
    .query({access_token: self.token})
    .type('json')
    .send(content)
    .end(wrapper(callback));
};

/*
 * 客服消息，发送文字消息
 * Examples:
 * ```
 * api.sendText('openid', 'Hello world', callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {String} text 发送的消息内容
 * @param {Function} callback 回调函数
 */
api.sendText = function(openid, text, callback) {
  var wrappedContent = customContentWrapper(openid, 'text', text);
  this._request(this._sendCustom,[wrappedContent, callback]);
};
/*
 * 客服消息，发送图片消息
 * Examples:
 * ```
 * api.sendImage('openid', 'media_id', callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {String} mediaId 媒体文件的ID，参见uploadMedia方法
 * @param {Function} callback 回调函数
 */
api.sendImage = function(openid, mediaId, callback) {
  var wrappedContent = customContentWrapper(openid, 'image', mediaId);
  this._request(this._sendCustom,[wrappedContent, callback]);
};
/*
 * 客服消息，发送语音消息
 * Examples:
 * ```
 * api.sendVoice('openid', 'media_id', callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {String} mediaId 媒体文件的ID
 * @param {Function} callback 回调函数
 */
api.sendVoice = function(openid, mediaId, callback) {
  var wrappedContent = customContentWrapper(openid, 'voice', mediaId);
  this._request(this._sendCustom, [wrappedContent, callback]);
};

/*
 * 客服消息，发送视频消息
 * Examples:
 * ```
 * api.sendVideo('openid', 'media_id', , callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {String} mediaId 媒体文件的ID
 * @param {Function} callback 回调函数
 */
api.sendVideo = function(openid, mediaId, callback) {
  var wrappedContent = customContentWrapper(openid, 'video', mediaId);
  this._request(this._sendCustom, [wrappedContent, callback]);
};
/*
 * 客服消息，发送图文消息
 * Examples:
 * ```
 * var articles = [
 *  {
 *    "title":"Happy Day",
 *    "description":"Is Really A Happy Day",
 *    "url":"URL",
 *    "picurl":"PIC_URL"
 *  },
 *  {
 *    "title":"Happy Day",
 *    "description":"Is Really A Happy Day",
 *    "url":"URL",
 *    "picurl":"PIC_URL"
 *  }];
 * api.sendNews('openid', articles, callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {Array} articles 图文列表
 * @param {Function} callback 回调函数
 */
api.sendNews = function(openid, articles, callback) {
  var wrappedContent = customContentWrapper(openid, 'news', articles);
  this._request(this._sendCustom, [wrappedContent, callback]);
};
/*
 * 客服消息，发送链接消息
 * Examples:
 * ```
 * var link = {
 *   "title" : "title",
 *   "description" : "description",
 *   "url" : "http://www.163.com/"
 * }
 * api.sendLink('openid', link, callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {Object} link 链接Json对象
 * @param {Function} callback 回调函数
 */
api.sendLink = function(openid, link, callback) {
  var wrappedContent = customContentWrapper(openid, 'link', link);
  this._request(this._sendCustom, [wrappedContent, callback]);
};
/*
 * 客服消息，发送名片
 * Examples:
 * ```
 * api.sendCard('openid', 'yinxinId', callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {String} yinxinId 易信Id
 * @param {Function} callback 回调函数
 */
api.sendCard = function(openid, yinxinId, callback) {
  var wrappedContent = customContentWrapper(openid, 'card', yinxinId);
  this._request(this._sendCustom, [wrappedContent, callback]);
};
/**
 * 群发消息
 * 详情: <http://dev.yixin.im/wiki/qa/index.php?title=群发消息>
 */
/*
 * 群发消息共用函数
 * ```
 * Callback:
 * - `err` 调用接口失败
 * ```
 * @Param {Object} content 客服消息内容,已封装好的客服消息Json对象
 * @Param {Function} callback 回调函数
 * ```
 */
api._sendGroup = function(content, callback) {
  var self = this;
  var url = self.groupMsgPrefix + 'send';
  if(!!content.err) {
    var error = {};
    error.name = "YixinApi-SendGroup";
    error.message = "the content to send is not validate";
    invokeCallback(callback, error);
    return;
  }
  request
    .post(url)
    .query({access_token: self.token})
    .type('json')
    .send(content)
    .end(wrapper(callback));
};
/*
 * 群发消息,发送文本消息
 * Example:
 * ```
 * api.sendGroupText('未分组', 'hello world', cb);
 * ```
 * Callback:
 * - `err` 调用失败时得到的异常
 * ```
 * @Param {String} groupName 分组名
 * @Param {String} text 文本内容
 * @Param {Function} Callback 回调函数
 */
api.sendGroupText = function(groupName, text, callback) {
  var wrappedContent = groupContentWrapper(groupName, 'text', text);
  this._request(this._sendGroup, [wrappedContent, callback]);
};
/*
 * 群发消息,发送名片
 * Example:
 * ```
 * api.sendGroupText('未分组', 'yixinid', cb);
 * ```
 * Callback:
 * - `err` 调用失败时得到的异常
 * ```
 * @Param {String} groupName 分组名
 * @Param {String} yixinId 易信Id
 * @Param {Function} Callback 回调函数
 */
api.sendGroupCard = function(groupName, yixinId, callback) {
  var wrappedContent = groupContentWrapper(groupName, 'card', yixinId);
  this._request(this._sendGroup, [wrappedContent, callback]);
};
/*
 * 客服消息，发送图文消息
 * Examples:
 * ```
 * var articles = [
 *  {
 *    "title":"Happy Day",
 *    "description":"Is Really A Happy Day",
 *    "url":"URL",
 *    "picurl":"PIC_URL"
 *  },
 *  {
 *    "title":"Happy Day",
 *    "description":"Is Really A Happy Day",
 *    "url":"URL",
 *    "picurl":"PIC_URL"
 *  }];
 * api.sendNews('openid', articles, callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 *
 * @param {String} openid 用户的openid
 * @param {Array} articles 图文列表
 * @param {Function} callback 回调函数
 */
api.sendGroupNews = function(groupName, articles, callback) {
  var wrappedContent = groupContentWrapper(groupName, 'news', articles);
  this._request(this._sendGroup, [wrappedContent, callback]);
};

/**
 * 管理素材库
 * 详情: <http://dev.yixin.im/wiki/qa/index.php?title=管理素材库>
 */
/*
 * 上传多媒体文件
 * Example:
 * ```
 * api.uploadMedia('filepath', 'voice', callback);
 * ```
 * Callback:
 * - `err`, 调用失败时的一场
 * - `data`, 成功返回的内容
 * ```
 * data:
 * - `type`, 媒体文件类型
 * - `media_id`, 媒体文件上传后获取的唯一标识
 * - `created_at`, 媒体文件上传的时间
 * ```
 * @Param {String} filepath, 上传媒体文件的路径
 * @Param {String} type 媒体文件类型, 媒体文件类型，分别有图片（image）、语音（voice）、视频（video）和缩略图（thumb）
 * @Param {Int} 媒体文件上传时间
 */
api.uploadMedia = function(filePath, type, callback) {
  this._request(this._uploadMedia, arguments);
};

api._uploadMedia = function(filePath, type, cb) {
  var self = this;
  var url = self.mediaPrefix + 'upload';
  fs.stat(filePath, function(err, stat) {
    if(err) {
      invokeCallback(cb, err);
      return;
    }
    var req = request
      .post(url)
      .query({access_token: self.token, type: type})
      .attach('media', filePath)
      .end(wrapper(cb));
  });
};
/**
 * 生成推广二维码
 * 详情: <http://dev.yixin.im/wiki/qa/index.php?title=生成推广二维码>
 */
/*
 * 获取二位吗
 * 详情: 生成二维码请求,可以得到ticket,通过ticket获取二维码
 * Example:
 * ```
 * api.getQRCode(ticket,callback)
 * ```
 * Callback
 * - `err`, 调用失败是的异常
 * - `data`, 图片的binary string
 */
// Tips: superagent没有解析`mime`为`image/*`的response
api.getQRCode = function(ticket, callback){
  var self = this;
  var url = self.qrcodePrefix + 'showqrcode';
  var req = request
    .get(url)
    .query({ticket: ticket});
  req.on('response', function(res) {
    res.data = '';
    var failed = false;
    if(res.statusCode === 200) {
      res.on('data', function(chunk) {
        if(failed) return;
        res.data += chunk;
      });

      res.on('end', function() {
        if(failed) return;
        invokeCallback(callback, null, res.data);
      });

      res.on('error', function(err) {
        err.name = "YixinApi-GetQRCode";
        failed = true;
        invokeCallback(callback, err);
      });
    } else {
      var err  = {
        name: 'YixinApi-GetQRCode',
        message: 'Request failed with code :' + res.statusCode
      };
      invokeCallback(callback, err);
    }
  });
};
/**
 * 生成二维码
 * Example:
 * ```
 * api.createTmpQRCode(123, 'action_name', 1800, callback);
 * ```
 * Callback:
 *
 * - `err`, 调用失败时得到的异常
 * - `data`, 调用正常时得到的对象
 *
 * Data:
 * ```
 * {
 *  "ticket":"gQG28DoAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL0FuWC1DNmZuVEhvMVp4NDNMRnNRAAIEesLvUQMECAcAAA==",
 *  "expire_seconds":1800
 * }
 * ```
 * @param {Number} sceneId 场景ID
 * @param {String} QRType 二维码类型: QR_SCENE为临时,QR_LIMIT_SCENE为永久
 * @param {Number} expireTime 过期时间，单位秒。最大不超过1800
 * @param {Function} callback 回调函数
 */
api.createQRCode = function (sceneId, QRType, expireTime, callback) {
  this._request(this._createQRCode, arguments);
};
api._createQRCode = function (sceneId, QRType, expireTime, callback) {
  var self = this;
  var url = this.qrcodePrefix + 'create';
  var cb = callback;
  expireTime = expireTime > 1800
    ? 1800
    : expireTime;
  var postData = {
    "action_name": QRType,
    "action_info" : {
      "scene" : {
        "scene_id" : sceneId
      }
    }
  };
  //临时二维码
  if(QRTYPE === 'QR_SCENE') {
    postData.expire_time = expireTime;
  }
  //永久二维码
  if(QRTYPE === 'QR_LIMIT_SCENE') {
    cb = expireTime;
  }
  request
    .post(url)
    .query({acess_token: self.token})
    .type('json')
    .send(postData)
    .end(wrapper(cb));
};
//生成临时二维码
api.createTmpQRCode = function (sceneId, expireTime, callback) {
  this.createQRCode(sceneId, "QR_SCENE", expireTime, callback);
};
//生成永久二维码
api.createLimitQRCode = function (sceneId, callback) {
  this.createQRCode(sceneId, "QR_SCENE", callback);
};

/**
 *
 * @param param
 * @param param.openid 要关注公众账号的用户openid
 * @param param.mobile 要关注公众账号的用户手机
 * @param callback([err])
 * ```
 * err.errcode 错误返回码
 * errmsg 错误提示
 * ```
 */
api.addFollow = function(param, callback) {
  this._request(this._addFollow, arguments);
};

api._addFollow = function(param, callback) {
  var self = this;
  var url = self.followPrefix + 'add';

  request.post(url)
    .query({access_token: self.token})
    .type('json')
    .send(param)
    .end(wrapper(callback));
};


/**
 * 获取用户高级信息
 * 详情: <http://dev.yixin.im/wiki/verify/index.php?title=获取好友关系>
 * @param openid
 * @param callback
 * ```callback
 *  -`err` 错误信息
 *  -`result`:
 *  {
 *    "subscribe": 1,
 *    "openid": "72201de2f279188e",
 *    "nickname": "激动",
 *    "sex": 1,
 *    "city": "杭州",
 *    "headimgurl": "http://nos.netease.com/yixinpublic/pr_xowu0ulatqvicaruiqiofq==_1383376292_2282",
 *    "subscribe_time": 1383874806,
 *    "language": "zh_CN",
 *    "bkImage":"BKIMAGE"
 *  }
 * ```
 */
api.getUserInfo = function(openid, callback) {
  this._request(this._getUserInfo, arguments);
};

api._getUserInfo = function(openid, callback) {
  var self = this;
  var url = self.userPrefix + 'uinfo';
  request.get(url)
    .query({access_token: self.token, openid: openid})
    .end(wrapper(callback))
};
/**
 * 获取好友关系
 * 详情: <http://dev.yixin.im/wiki/verify/index.php?title=获取好友关系>
 * @param openid
 * @param callback
 */
api.getFriends = function(openid, callback) {
  this._request(this._getFriends, arguments);
};
api._getFriends = function(openid, callback) {
  var self = this;
  var url = self.userPrefix + 'friends';
  request.get(url)
    .query({access_token: self.token, openid: openid})
    .end(wrapper(callback));
};
module.exports = API;