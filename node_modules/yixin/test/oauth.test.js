/**
 * Created by fuzesun on 14-5-15.
 */
var should = require('should');

var nock = require('nock');
var Yixin = require('../');
var OAuth = Yixin.OAuth;


describe('oauth.js', function(){

  var oauth = new OAuth('appid', 'secret');
  var mock;

  before(function() {
    mock = nock('https://api.yixin.im')
      .get('/sns/oauth2/access_token?appid=appid&secret=secret&code=CODE&grant_type=authorization_code')
      .reply(200, {
        access_token: 'access_token',
        expires_in: 7200,
        refresh_token: 'refresh_token',
        openid: 'openid',
        scope: 'scope'
      })
      .get('/sns/oauth2/refresh_token?appid=appid&grant_type=refresh_token&refresh_token=refresh_token')
      .reply(200, {
        access_token: 'access_token',
        expires_in: 7200,
        refresh_token: 'refresh_token',
        openid: 'openid',
        scope: 'scope'
      })
      .get('/sns/userinfo?openid=openid&access_token=access_token')
      .reply(200, {
        subscribe: 1,
        openid: "OPENID",
        nickname: "NICKNAME",
        sex: "sex",
        language: "LANG",
        city: "city"
      });
  });

  describe('#getAuthorizeURL', function() {
    describe('##scope is string', function() {
      it('should ok', function() {
        var scope = "abc";
        var redirect = "http://www.163.com";
        var state = "hello";
        var isInYinxin = false;
        var url = oauth.getAuthorizeURL(redirect, scope, state, isInYinxin);
        url.should.eql('http://open.plus.yixin.im/connect/oauth2/authorize?appid=appid&redirect_uri=http%3A%2F%2Fwww.163.com&scope=abc&state=hello#yixin_redirect')
      });
    });
    describe('##scope is Array', function() {
      it('should ok', function() {
        var scope = ['abc','def'];
        var redirect = "http://www.163.com";
        var state = "hello";
        var isInYinxin = false;
        var url = oauth.getAuthorizeURL(redirect, scope, state, isInYinxin);
        url.should.eql('http://open.plus.yixin.im/connect/oauth2/authorize?appid=appid&redirect_uri=http%3A%2F%2Fwww.163.com&scope=abc%2Cdef&state=hello#yixin_redirect');
      });
    });
    describe('##isInYixin is true', function() {
      it('should ok', function () {
        var scope = ['abc', 'def'];
        var redirect = "http://www.163.com";
        var state = "hello";
        var isInYinxin = true;
        var url = oauth.getAuthorizeURL(redirect, scope, state, isInYinxin);
        url.should.eql('http://open.plus.yixin.im/connect/oauth2/authorize?appid=appid&redirect_uri=http%3A%2F%2Fwww.163.com&scope=abc%2Cdef&state=hello');

      });
    });
    describe('##scope is null', function() {
      it('should ok', function() {
        var redirect = "http://www.163.com";
        var state = "hello";
        var isInYinxin = true;
        var url = oauth.getAuthorizeURL(redirect, null, state, isInYinxin);
        url.should.eql('http://open.plus.yixin.im/connect/oauth2/authorize?appid=appid&redirect_uri=http%3A%2F%2Fwww.163.com&scope=snsapi_base&state=hello');
      });
    });
  });

  describe('#isAccessTokenExpired', function() {
    var params = {
      beforeTime: new Date().getTime() + 1500 * 1000,
      afterTime: new Date().getTime() - 500 * 1000

    };
    describe('access token is not expired', function() {

      it(' the return should be false', function() {
        oauth.isAccessTokenExpired(params.beforeTime).should.be.ok;
      });
    });

    describe('access token is expired', function() {

      it(' the return should be true', function() {
        oauth.isAccessTokenExpired(params.afterTime).should.not.be.ok;
      });
    });
  });

  describe('#requestAccessToken', function() {
    it('should ok', function(done) {
      oauth.requestAccessToken('CODE', function(err,result) {
        should.not.exist(err);
        result.should.have.keys('access_token', 'expires_in', 'refresh_token', 'openid', 'scope');
        done();
      });
    });
  });
  describe('#refreshAccessToken', function() {
    var refreshToken = 'refresh_token';
    it('should ok', function(done) {
      oauth.refreshAccessToken(refreshToken, function(err,result) {
        should.not.exist(err);
        result.should.have.keys('access_token', 'expires_in', 'refresh_token', 'openid', 'scope');
        done();
      });
    });
  });
  describe('#getUser', function() {
    var params = {
      token : 'access_token'
    };

    it('should ok', function(done) {
      oauth.getUser('openid', params.token, function(err, result) {
        should.not.exist(err);
        result.should.have.keys('subscribe','openid','nickname','sex','language','city');
        done();
      });
    });
  });
});
